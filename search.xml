<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++函数的相关知识点总结</title>
      <link href="/2023/04/13/C++%20%E5%87%BD%E6%95%B0/"/>
      <url>/2023/04/13/C++%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center;">    <h1><strong>C++ Function</h1></div><p style="font-family:楷体;font-size:18px"><b>C++的历史可以追溯到1979年，那年C++之父 <i>Bjarne Stroustrup</i> 正在准备他的博士毕业论文。那时的他还在使用一种叫<cite> Simula </cite>的语言进行开发。但是<cite> Simula </cite>语言执行效率低，实用性并不强。<i>Stroustrup</i> 便开始着手 <i>C with Classes</i> 的研发工作。1983年，<i>C with Classes</i> 语言更名为C++。之所以被命名为C++，是为了表达该语言与C语言的渊源关系。</p><hr /><br /><div style="text-align: center;"><p style="font-family:微软雅黑;font-size:14px">函数 (function) 是 C++ 编程语言中极其重要的概念之一，函数可以让程序更加模块化，使代码易于阅读和维护。 </p> </div><hr /><br /><div class="toc"><p>目录:</p><p>(点击跳转，您可以点击页面右下角的`↑`跳回顶部)<ul>    <li><a href="#section1">Ⅰ.函数的基本语法</a></li></ul><ul>    <li><a href="section2">Ⅱ.函数的参数传递</a>        <ul>            <li><a href="subsection2-1">1.按值传递</a></li>            <li><a href="subsection2-2">2.按引用传递</a></li>            <li><a href="subsection2-3">3.按指针传递</a></li>        </ul>    </li></ul> <ul>    <li><a href="section3">Ⅲ.函数的返回值</a>        <ul>            <li><a href="subsection3-1">1.基本数据类型</a></li>            <li><a href="subsection3-2">2.结构体</a></li>            <li><a href="subsection3-3">3.类对象</a></li>            <li><a href="subsection3-4">4.指针</a></li>        </ul>    </li></ul><ul>    <li><a href="section4">Ⅳ.函数的递归</a>        <ul>            <li><a href="subsection4-1">1.直接递归</a></li>            <li><a href="subsection4-2">2.间接递归</a></li>            <li><a href="subsection4-3">3.递归的注意事项</a></li>            <li><a href="subsection4-4">4.总结</a></li>        </ul>    </li></ul><ul>    <li><a href="section5">Ⅴ.函数的重载</a>        <ul>            <li><a href="subsection5-1">1.概念</a></li>            <li><a href="subsection5-2">2.应用</a></li>        </ul>    </li></ul><ul>    <li><a href="section6">Ⅵ.函数的默认参数</a>        <ul>            <li><a href="subsection6-1">1.指定默认函数</a></li>            <li><a href="subsection6-2">2.使用默认函数</a></li>            <li><a href="subsection6-3">3.总结</a></li>        </ul>    </li></ul><ul>    <li><a href="section7">Ⅶ.函数的作用域</a>        <ul>            <li><a href="subsection7-1">1.全局作用域</a></li>            <li><a href="subsection7-2">2.块作用域</a></li>            <li><a href="subsection7-3">3.局部作用域</a></li>            <li><a href="subsection7-4">4.类作用域</a></li>            <li><a href="subsection7-5">5.命名空间作用域</a></li>            <li><a href="subsection7-6">6.如何处理作用域冲突？</a></li>        </ul>    </li></ul><ul>    <li><a href="section8">Ⅷ.内联函数 </a>        <ul>            <li><a href="subsection8-1">1.什么是内联函数</a></li>            <li><a href="subsection8-2">2.如何定义和使用内联函数</a></li>            <li><a href="subsection8-3">3.内联函数的注意事项</a></li>        </ul>    </li></ul><ul>    <li><a href="section9">Ⅸ.函数模板 </a>        <ul>            <li><a href="subsection9-1">1.函数模板的概念</a></li>            <li><a href="subsection9-2">2.函数模板的语法</a></li>            <li><a href="subsection9-3">3.函数模板的用法</a></li>            <li><a href="subsection9-4">4.总结</a></li>        </ul>    </li></ul><ul>    <li><a href="section10">Ⅹ.Lambda表达式 </a>        <ul>            <li><a href="subsection10-1">1.Lambda表达式的起源</a></li>            <li><a href="subsection10-2">2.Lambda表达式的概念及语法</a></li>            <li><a href="subsection10-3">3.捕获列表</a></li>            <li><a href="subsection10-4">4.应用</a></li>        </ul>    </li></ul><HR style="FILTER: alpha(opacity=100,finishopacity=0,style=3)" width="80%" color=#987cb9 SIZE=3><h2 id="Ⅰ-函数的基本语法"><a href="#Ⅰ-函数的基本语法" class="headerlink" title="Ⅰ.函数的基本语法  "></a><p style="font-family:幼圆;font-size:25px">Ⅰ.函数的基本语法  </p></h2><p><a name="section1"></a></p><p>在C++中，函数的基本语法如下: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[return_type][function_name](parameter list)</span><br><span class="line">&#123;</span><br><span class="line">    function body;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，<code>return_type</code> (返回值类型) 指的是函数返回的值的数据类型，可以是任何C++数据类型，包括基本类型、指针类型和自定义类型等。<code>function_name</code> (函数名) 是函数的名称，当然这个名字在遵循命名规范的前提下可以随意起。<br /><br><a href="https://blog.csdn.net/shuiyixin/article/details/83117192">这是C++类、结构体、函数、变量等命名规则详解，点击查看</a><br><br /><code>parameter list</code> (参数列表) 是函数的输入参数列表。  </p><hr />函数体是一组语句，用于执行函数的操作。下面是一个简单的示例:  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，函数名为<code>add</code>，参数列表包括两个整型变量<code>a</code>和<code>b</code>。函数体中使用了加法运算符将<code>a</code>和<code>b</code>相加，并将结果返回。<br><br />注意，如果函数不需要返回值，则可以将返回类型指定为<code>void</code>，如下所示:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_Hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello,world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，函数名为<code>Print_Hello</code>，参数列表为空。函数体中使用了输出语句输出 <em>hello,world!</em> ，但是没有返回值。<br><br />此外，函数的定义必须在使用之前。可以将函数定义放在程序的开头，或者在需要使用函数的位置之前提前声明函数。例如:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> z=<span class="built_in">add</span>(x,y);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; x + y = &quot;</span>&lt;&lt; z &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> z=<span class="built_in">add</span>(x,y);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; x + y = &quot;</span>&lt;&lt; z &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">这么写也是没有问题的，在这个程序中，函数`add`的定义在`main`函数之前，但这并不会导致编译错误。这是因为C++编译器通常会对函数进行预处理，将函数的声明提前到函数调用之前，从而解决函数定义在使用之前的问题。&lt;br /&gt;但是在实际开发中，我们通常会将函数的声明和实现分别放在不同的文件中，然后使用头文件将他们连接起来。这种方法可以提高代码的可维护性以及可读性。因此第一种编程方式中的声明方式更常用也更严谨。&lt;br /&gt;</span><br><span class="line">[这是关于C++ 中的头文件和源文件的作用的一篇文章，感兴趣的话可以看一下](https:<span class="comment">//www.runoob.com/w3cnote/cpp-header.html#:~:text=%E4%B8%80%E3%80%81%E6%BA%90%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE)  </span></span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">## &lt;p style=<span class="string">&quot;font-family:幼圆;font-size:25px&quot;</span>&gt;Ⅱ.函数的参数传递  &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;a name=<span class="string">&quot;section2&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">函数的参数传递指的是将数据传递给函数的方式。在C++中，有三种常见的参数传递方式:  </span><br><span class="line"></span><br><span class="line">#### &lt;p style=<span class="string">&quot;font-family:幼圆;font-size:20px&quot;</span>&gt;&lt;b&gt;<span class="number">1.</span>按值传递&lt;/p&gt;</span><br><span class="line">&lt;a name=<span class="string">&quot;subsection2-1&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">按值传递是将参数的值传递给函数，而不是传递参数的地址或引用。这意味着函数的操作只会对传递给函数的副本进行，而不会对原始变量进行修改。这就是常说的 &lt;ins&gt;“形(参)变实(参)不变” &lt;/ins&gt;例如:  </span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="type">void</span> <span class="built_in">setValue</span>(<span class="type">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">setValue</span>(value);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">在这个示例中，函数 `setValue` 接收一个<span class="type">int</span>类型参数 `x` ，但是在函数中修改了 `x` 的值，并不会对原始的`value`变量产生影响，输出结果为 `value = <span class="number">0</span>` 。&lt;br /&gt;</span><br><span class="line">#### &lt;p style=<span class="string">&quot;font-family:幼圆;font-size:20px&quot;</span>&gt;&lt;b&gt;<span class="number">2.</span>按引用传递&lt;/p&gt; </span><br><span class="line">&lt;a name=<span class="string">&quot;subsection2-2&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">按引用传递是将参数的引用传递给函数，而不是传递参数的副本。这意味着函数的操作会直接影响到原始变量。例如:  </span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="type">void</span> <span class="built_in">setValue</span>(<span class="type">int</span>&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">setValue</span>(value);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">在这个示例中，函数 `setValue` 接收一个<span class="type">int</span>类型的引用 `x` ，在函数中修改了 &lt;em&gt;x&lt;/em&gt; 的值，这个修改也会影响到原始的 `value` 变量，输出结果为 `value = <span class="number">100</span>` 。&lt;br /&gt;</span><br><span class="line">#### &lt;p style=<span class="string">&quot;font-family:幼圆;font-size:20px&quot;</span>&gt;&lt;b&gt;<span class="number">3.</span>按指针传递&lt;/p&gt; </span><br><span class="line">&lt;a name=<span class="string">&quot;subsection2-3&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">按指针传递是将参数的地址传递给函数，而不是传递参数的副本。这意味着函数的操作会直接影响到原始变量。例如:</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="type">void</span> <span class="built_in">setValue</span>(<span class="type">int</span>* x)</span><br><span class="line">&#123;</span><br><span class="line">    *x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">setValue</span>(&amp;value);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，函数 <code>setValue</code> 接收一个指向int类型变量的指针 <code>x</code> ，在函数中修改了 <code>x</code> 指向的变量的值，这个修改也会影响到原始的 <code>value</code> 变量，输出结果为 <code>value = 100</code> 。<br /></p><hr /><p style="font-family:楷体;font-size:18px">虽然引用传递和指针传递都可以实现对变量的间接访问，但它们之间还是有一些区别的。<br />首先，引用在语法上更加简洁，可以看作是指针的一种<ins>语法糖</ins>。使用引用传递参数可以像传值一样简单，而不需要使用取地址符号'&'来取得指针的地址，也不需要在函数内部使用解引用符号'*'来访问指针所指向的对象。<br />其次，引用传递比指针传递更加安全，因为它不会出现指针为空的情况。在使用指针传递参数时，需要进行指针的有效性检查，以避免出现非法访问或者段错误等问题。而在使用引用传递参数时，可以省略这些检查，因为引用本身就必须指向一个已经存在的对象。<br />最后，引用传递比指针传递更加符合C++的面向对象设计理念。引用传递可以看作是对函数参数的封装，它隐藏了参数的实现细节，使得函数调用更加简单，更加容易理解。而指针传递则更加强调了程序员对内存管理的控制，需要考虑更多的细节问题，容易造成程序的错误和难以调试。<br />因此，尽管引用和指针都可以实现对变量的间接访问，但在C++中，引用传递更加常用，也更加符合C++的<ins>面向对象设计理念</ins>。<br /><hr /><p style="font-family:楷体;font-size:18px">选择使用哪种参数传递方式，通常取决于具体的情况和实际需求。下面我列举了一些常见的情况和建议的选择方式:<br />1.如果参数是基本类型，且不需要修改原始值，可以使用按值传递。按值传递会将参数值拷贝一份，避免了修改原始值的风险;<br />2.如果参数是较大的对象，或者需要修改原始值，可以使用按引用传递。按引用传递不需要拷贝对象，可以避免复制大量数据的开销，也可以直接修改原始值，避免了通过拷贝进行修改的效率损失;<br />3.如果需要对指针进行修改，可以使用按指针传递。按指针传递需要进行有效性检查，但可以直接修改指针所指向的对象，非常灵活。<br />综上所述，选择使用哪种参数传递方式，需要根据具体情况进行选择，并综合考虑代码的效率、灵活性和可读性等方面的因素。<br /><hr /><h2 id="Ⅲ-函数的返回值"><a href="#Ⅲ-函数的返回值" class="headerlink" title="Ⅲ.函数的返回值  "></a><p style="font-family:幼圆;font-size:25px">Ⅲ.函数的返回值  </p></h2><p><a name="section3"></a></p><p>C++中的函数返回值是指函数执行完毕后返回给调用者的值。函数的返回值类型决定了返回值的数据类型，返回值的用途则取决于函数的具体实现。<br />C++中函数的返回值类型可以是基本数据类型、结构体、类对象、指针等。下面我将分别介绍这些类型的返回值以及它们的用途。</p><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a><p style="font-family:幼圆;font-size:20px"><b>1.基本数据类型</h4><p><a name="subsection3-1"></a></p><p>C++中的基本数据类型包括整型 <em>(int)</em> 、浮点型 <em>(float)</em> 、字符型 <em>(char)</em> 等。函数返回基本数据类型的值可以用于进行算术运算、条件判断、函数嵌套调用等。<br /><br>例如，一个函数可以返回两个整数的和，这个和可以作为其他函数的参数传递，或者在其他地方进行其他运算:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  cout &lt;&lt; sum &lt;&lt; endl; <span class="comment">// 输出3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">下面是一个返回值是浮点型的函数的例子:  </span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculateCircleArea</span><span class="params">(<span class="type">double</span> radius)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.1415926535</span>;</span><br><span class="line">  <span class="type">double</span> area = PI * radius * radius;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">double</span> radius = <span class="number">2.5</span>;</span><br><span class="line">  <span class="type">double</span> area = <span class="built_in">calculateCircleArea</span>(radius);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The area of the circle with radius &quot;</span> &lt;&lt; radius &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; area &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个程序中， <code>calculateCircleArea</code> 函数接受一个double类型的参数 <code>radius</code> ，表示圆的半径。根据半径的值，函数计算圆的面积，并返回一个浮点型数据表示面积。在主函数中，程序通过调用 <code>calculateCircleArea</code> 函数获取圆的面积，并将其打印出来。</p><p>下面是一个返回字符型的函数的例子:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getGrade</span><span class="params">(<span class="type">double</span> score)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">double</span> score = <span class="number">85.5</span>;</span><br><span class="line">  <span class="type">char</span> grade = <span class="built_in">getGrade</span>(score);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The grade of the student is: &quot;</span> &lt;&lt; grade &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个程序中， <code>getGrade</code> 函数接受一个double类型的参数 <code>score</code> ，表示学生的成绩。根据成绩的高低，函数返回不同的字符型数据，表示学生的等级（A、B、C、D或F）。在主函数中，程序通过调用 <code>getGrade</code> 函数获取学生的等级，并将其打印出来。<br /></p><h4 id="2-结构体"><a href="#2-结构体" class="headerlink" title="2.结构体"></a><p style="font-family:幼圆;font-size:20px"><b>2.结构体</h4><p><a name="subsection3-2"></a></p><p>结构体是一种自定义数据类型，可以将多个变量打包成一个整体。函数返回结构体的值可以将多个相关的值作为一个整体返回，便于程序的组织和管理。<br />例如，一个函数可以返回一个表示学生信息的结构体，包括姓名、年龄、成绩等信息。这些信息可以被其他函数调用或者用于其他操作:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> </span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">getStudentInfo</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Student s;</span><br><span class="line">  s.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">  s.age = <span class="number">18</span>;</span><br><span class="line">  s.score = <span class="number">90.0</span>;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Student s = <span class="built_in">getStudentInfo</span>();</span><br><span class="line">  cout &lt;&lt; s.name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s.score &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-类对象"><a href="#3-类对象" class="headerlink" title="3.类对象"></a><p style="font-family:幼圆;font-size:20px"><b>3.类对象</h4><p><a name="subsection3-3"></a></p><p>C++中的类对象是一种自定义数据类型，包含了数据和成员函数。函数返回类对象的值可以将一个完整的对象作为一个整体返回，便于程序的组织和管理。<br />例如，一个函数可以返回一个表示矩形的类对象，包括长、宽等信息。这些信息可以被其他函数调用或者用于其他操作:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> width;</span><br><span class="line">  <span class="type">int</span> height;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width * height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Rectangle <span class="title">getRectangleInfo</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Rectangle r;</span><br><span class="line">  r.width = <span class="number">10</span>;</span><br><span class="line">  r.height = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Rectangle r = <span class="built_in">getRectangleInfo</span>();</span><br><span class="line">  cout &lt;&lt; r.<span class="built_in">getArea</span>() &lt;&lt; endl; <span class="comment">// 输出200</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-指针"><a href="#4-指针" class="headerlink" title="4.指针"></a><p style="font-family:幼圆;font-size:20px"><b>4.指针</h4><p><a name="subsection3-4"></a></p><p>指针是一种特殊的数据类型，它存储了一个变量的地址。函数返回指针的值可以将指向某个变量的地址返回，这样可以在函数之间传递变量的地址，实现对变量的间接访问。<br />例如，一个函数可以返回一个动态分配内存的指针，这个指针可以被其他函数调用或者用于其他操作，这样可以在程序中动态地创建、修改和释放内存:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">createArray</span><span class="params">(<span class="type">int</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[size];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    arr[i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span>* arr = <span class="built_in">createArray</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">printArray</span>(arr, <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">delete</span>[] arr;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><p style="font-family:楷体;font-size:18px">在使用函数返回值时，需要注意以下几点：<br />1.返回值类型必须与函数定义中指定的返回值类型相同或者可以隐式转换为返回值类型。<br />2.在函数中，return语句可以有多个，但是只有一个会被执行。如果在函数中出现多个return语句，只有第一个被执行，其余的都被忽略。<br />3.函数返回值可以直接用作表达式或者赋值给变量，也可以作为函数调用的参数。<br/>4.如果函数没有返回值，返回类型可以是void，也可以省略返回类型。在这种情况下，函数中不需要使用return语句，或者使用return语句返回空值。<hr /><h2 id="Ⅳ-函数的递归"><a href="#Ⅳ-函数的递归" class="headerlink" title="Ⅳ.函数的递归  "></a><p style="font-family:幼圆;font-size:25px">Ⅳ.函数的递归  </p></h2><p><a name="section4"></a><br>C++函数的递归是指函数调用自身的过程。当函数在执行过程中调用自身时，就会出现递归。递归可以将一个复杂的问题分解成多个子问题，从而使程序更容易理解和实现。递归有两种类型：直接递归和间接递归。</p><h4 id="1-直接递归"><a href="#1-直接递归" class="headerlink" title="1.直接递归"></a><p style="font-family:幼圆;font-size:20px"><b>1.直接递归</p></h4><p><a name="subsection4-1"></a></p><p>直接递归是指函数直接调用自身的过程。例如下面的程序代码运用直接递归计算了一个给定正整数的阶乘:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a positive integer: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Factorial of &quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; <span class="built_in">factorial</span>(num) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>factorial()</code> 函数调用了自己，以便递归计算给定整数的阶乘。如果 n 的值为 0，则 <code>factorial()</code> 函数返回 1。否则，它返回 <code>n * factorial(n-1)</code> ，这个表达式会在函数中再次调用 <code>factorial()</code> 函数。当 n 的值最终降到 0 时，递归调用将停止并开始返回结果。</p><h4 id="2-间接递归"><a href="#2-间接递归" class="headerlink" title="2.间接递归"></a><p style="font-family:幼圆;font-size:20px"><b>2.间接递归</h4><p><a name="subsection4-2"></a></p><p>间接递归是指函数通过其他函数调用自身的过程。下面是一个使用间接递归实现斐波那契数列的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fibonacci</span>(n<span class="number">-1</span>) + <span class="built_in">fibonacci</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fibonacci</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">55</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，函数 <code>fibonacci</code> 通过调用自身来计算斐波那契数列的第n项。当n等于0或1时，函数返回n。否则，它会返回 <code>fibonacci(n-1)</code> 加上 <code>fibonacci(n-2)</code> 的结果。在 <code>main</code> 函数中，我们调用 <code>fibonacci</code> 来计算第10项的斐波那契数列，并将结果输出到控制台。</p><h4 id="3-递归的注意事项"><a href="#3-递归的注意事项" class="headerlink" title="3.递归的注意事项"></a><p style="font-family:幼圆;font-size:20px"><b>3.递归的注意事项</h4><p><a name="subsection4-3"></a></p><p>递归可以使程序更容易理解和实现，但是在使用递归时需要注意一些事项。</p><p>首先，递归可能会导致栈溢出。当递归的层数过多时，函数的栈空间可能会耗尽，从而导致程序崩溃。为了避免栈溢出，我们可以使用尾递归或迭代来替代递归。尾递归是指函数的最后一个操作是调用自身的递归，而迭代是指使用循环来替代递归。</p><p>其次，递归可能会降低程序的性能。当递归的层数过多时，程序的执行时间可能会变得很长。为了避免这种情况，我们可以使用记忆化技术来避免重复计算，从而提高程序的性能。</p><p>最后，递归需要谨慎使用。在某些情况下，递归可能会导致代码的复杂度增加，从而使程序难以理解和维护。因此，在使用递归时，需要权衡其优缺点，谨慎决定是否使用递归。</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a><p style="font-family:幼圆;font-size:20px"><b>4.总结</h4><p><a name="subsection4-4"></a></p><p>C++函数的递归是指函数调用自身的过程，它可以将一个复杂的问题分解成多个子问题，从而使程序更容易理解和实现。递归有两种类型：直接递归和间接递归。在使用递归时，需要注意栈溢出、程序性能和代码复杂度等问题，谨慎决定是否使用递归。</p><hr><h2 id="Ⅴ-函数的重载"><a href="#Ⅴ-函数的重载" class="headerlink" title="Ⅴ.函数的重载  "></a><p style="font-family:幼圆;font-size:25px">Ⅴ.函数的重载  </p></h2><p><a name="section5"></a></p><p><a href="https://www.runoob.com/cplusplus/cpp-overloading.html">可以阅读这篇文章详细了解C++ 重载运算符和重载函数</a>  </p><hr />函数重载是C++中一项强大的特性，它允许我们定义多个同名但参数列表不同的函数。这样做的好处是可以简化函数命名，提高代码可读性，同时允许函数以多种方式处理不同的参数类型和数量。接下来我会介绍C++函数重载的概念和语法。<h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a><p style="font-family:幼圆;font-size:20px"><b>1.概念</h4><p><a name="subsection5-1"></a></p><p>C++函数的重载（overloading）是指在同一个作用域内，允许定义多个同名函数，但是这些函数的参数列表必须不同。在调用这些同名函数时，编译器会根据传递给函数的实参的个数、类型或顺序，来决定具体调用哪一个函数。</p><h4 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a><p style="font-family:幼圆;font-size:20px"><b>2.应用</h4><p><a name="subsection5-2"></a></p><p>函数重载的语法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">(parameter_list_1)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">(parameter_list_2)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以有多个重载函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在函数重载中，同一个函数名可以被用来定义多个函数，但是这些函数的参数列表必须不同。</p><p>参数列表的不同可以体现在以下几个方面：</p><ul><li>参数的类型不同</li><li>参数的个数不同</li><li>参数的顺序不同</li></ul><p>需要注意的是，函数重载中不能只根据函数的返回类型或者函数体的实现不同来进行区分。因为函数的返回类型和函数体的实现对于函数的调用者来说是不可见的，只有参数列表才能够用来确定调用哪个函数。</p><p>下面是一个具体的函数重载的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载函数1：接受两个整数参数，返回它们的和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载函数2：接受两个浮点数参数，返回它们的和</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载函数3：接受一个整数参数和一个浮点数参数，返回它们的和</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">  <span class="type">double</span> p = <span class="number">2.5</span>, q = <span class="number">3.5</span>;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;add(int, int): &quot;</span> &lt;&lt; <span class="built_in">add</span>(x, y) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;add(double, double): &quot;</span> &lt;&lt; <span class="built_in">add</span>(p, q) &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;add(int, double): &quot;</span> &lt;&lt; <span class="built_in">add</span>(x, q) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了三个重载函数 <code>add</code>，分别接受不同类型和数量的参数，并返回对应类型的值。在主函数中，我们调用了这三个函数，并输出它们的返回值。由于函数重载的特性，编译器会根据传递给函数的实参的个数、类型或顺序，来决定具体调用哪一个函数。</p><hr /><p style="font-family:楷体;font-size:18px">在使用函数重载时，需要注意以下几点:<br /><br />1.函数名称相同，但是参数列表不同<br /><br />在函数重载中，函数名称相同但参数列表不同的函数被视为不同的函数。因此，需要确保每个函数的参数列表是不同的，否则编译器将无法确定要调用哪个函数。<br /><br />2.返回类型不能作为重载函数的区分标准<br /><br />函数的返回类型不应该被用作区分重载函数的标准，因为在调用函数时，编译器不会只根据返回类型来选择重载函数，而是根据函数的参数列表来选择。<br /><br />3.函数重载不允许只有默认参数不同<br /><br />如果一个函数的两个版本只有默认参数不同，那么这两个函数将被视为相同的函数，编译器会报错。<br /><br />4.函数重载和函数模板的区别<br /><br />函数模板也可以实现类似于函数重载的功能，但是两者有区别。函数模板是一种通用的函数，可以用于不同类型的参数，而函数重载则是为了处理具有不同参数类型或数量的多个函数。<br /><br />5.调用重载函数时需要匹配参数<br /><br />在调用重载函数时，需要确保传递给函数的参数类型、数量、顺序等与某个重载函数的参数列表匹配，否则编译器将无法确定要调用哪个函数，从而导致编译错误。<br /><br />总之，函数重载是一种强大的编程技术，可以使代码更加简洁、易于维护和扩展。但是，在使用函数重载时，需要注意参数列表的不同、函数名称的相同以及避免使用默认参数等情况，才能充分利用函数重载的优势。<hr /><h2 id="Ⅵ-函数的默认参数"><a href="#Ⅵ-函数的默认参数" class="headerlink" title="Ⅵ.函数的默认参数  "></a><p style="font-family:幼圆;font-size:25px">Ⅵ.函数的默认参数  </p></h2><p><a name="section6"></a></p><p style="font-family:幼圆;font-size:14px"><ins>个人认为</ins>这一部分不用太关注<p><a href="https://www.programiz.com/cpp-programming/default-argument">关于C++默认参数的一篇不错的文章，不过是英文版</a></p><hr /><p>C++函数的默认参数是指，当调用函数时，如果没有为某些参数提供值，则这些参数将使用预定义的默认值。这可以使代码更加简洁和易读，因为调用方只需要提供必要的参数，而不需要提供每个可选参数的值。</p><h4 id="1-指定默认参数"><a href="#1-指定默认参数" class="headerlink" title="1.指定默认参数"></a><p style="font-family:幼圆;font-size:20px"><b>1.指定默认参数</h4><p><a name="subsection6-1"></a></p><p>在C++中，可以在函数声明或定义中为参数提供默认值。例如，下面的函数声明为一个名为”foo”的函数提供了一个默认参数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这表示”b”参数的默认值为0。如果调用方在调用该函数时不提供”b”参数，则将使用0作为该参数的值。如果调用方为”b”参数提供了值，则将使用提供的值，而不是默认值。</p><h4 id="2-使用默认参数"><a href="#2-使用默认参数" class="headerlink" title="2.使用默认参数"></a><p style="font-family:幼圆;font-size:20px"><b>2.使用默认参数</h4><p><a name="subsection6-2"></a></p><p>当调用具有默认参数的函数时，可以选择省略其中一个或多个参数。例如，如果使用上面的函数”foo”，可以像这样调用它:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">42</span>); <span class="comment">// b将使用默认值0</span></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">42</span>, <span class="number">99</span>); <span class="comment">// b将使用提供的值99</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，第一个调用省略了”b”参数，而第二个调用为”b”参数提供了值。</p><p>另外，可以在函数调用中使用以下语法来显式地传递默认值:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">42</span>, <span class="keyword">default</span>); <span class="comment">// b将使用默认值0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的例子中，“default”是一个特殊的关键字，它告诉编译器使用该参数的默认值。</p><h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a><p style="font-family:幼圆;font-size:20px"><b>3.总结</h4><p><a name="subsection6-3"></a></p><p>C++中的函数默认参数是一种很方便的特性，可以使代码更加简洁和易读。可以在函数声明或定义中为参数提供默认值，调用方可以选择省略其中一个或多个参数。如果省略了参数，则将使用预定义的默认值，否则将使用提供的值。</p><hr><h2 id="Ⅶ-函数的作用域"><a href="#Ⅶ-函数的作用域" class="headerlink" title="Ⅶ.函数的作用域  "></a><p style="font-family:幼圆;font-size:25px">Ⅶ.函数的作用域  </p></h2><p><a name="section7"></a></p><p>作用域指的是一个变量或函数被定义时所属的代码块。作用域决定了变量或函数在哪里可以被访问和使用，它决定了变量的可见性和生命周期。在C++中，有以下几种作用域:  </p><ul><li><p>全局作用域<p style="font-family:楷体;font-size:17px">在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁。</p></li><li><p>局部作用域<p style="font-family:楷体;font-size:17px">在函数或一个代码块内部声明的变量具有局部作用域，它们只能在函数内部或者代码块内部的语句使用。局部变量在函数每次被调用时被创建，在函数执行完后被销毁。</p></li><li><p>块作用域<p style="font-family:楷体;font-size:17px">在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁。</p></li><li><p>类作用域<p style="font-family:楷体;font-size:17px">在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。</p></li><li><p>命名空间作用域<p style="font-family:楷体;font-size:15px">在命名空间内部声明的变量具有命名空间作用域，它们可以被同一命名空间中的其他变量或者使用了命名空间名或者using指令的其他地方访问。命名空间作用域变量的生命周期与程序的生命周期相同。</p></li></ul><div style="text-align: center;">    <h1><strong>How To Use?</h1></div><h4 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1.全局作用域"></a><p style="font-family:幼圆;font-size:20px"><b>1.全局作用域</h4><p><a name="subsection7-1"></a></p><p>全局作用域中声明的变量可以直接使用，也可以使用 <code>::</code> 运算符来指定。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 直接使用全局变量</span></span><br><span class="line">    cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 使用::运算符指定全局变量</span></span><br><span class="line">    cout &lt;&lt; ::g &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-块作用域"><a href="#2-块作用域" class="headerlink" title="2.块作用域"></a><p style="font-family:幼圆;font-size:20px"><b>2.块作用域</h4><p><a name="subsection7-2"></a></p><p>块作用域中声明的变量只能在该代码块内使用，不能在其他地方访问。例如:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>; <span class="comment">// main函数内的局部变量</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">20</span>; <span class="comment">// 块作用域内的局部变量只能在该代码块内使用a</span></span><br><span class="line">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只能在main函数内使用a</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-局部作用域"><a href="#3-局部作用域" class="headerlink" title="3.局部作用域"></a><p style="font-family:幼圆;font-size:20px"><b>3.局部作用域</h4><p><a name="subsection7-3"></a></p><p>局部作用域是指在函数或一个代码块内部声明的变量或函数的作用域，它们只能在函数内部或者代码块内部的语句使用。例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 只能在foo函数内使用x</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明</span></span><br><span class="line">    <span class="type">int</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 只能在main函数内使用y</span></span><br><span class="line">    cout &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 调用foo函数</span></span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">    <span class="comment">// 不能在main函数内使用x，会报错</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr /><p style="font-family:楷体;font-size:17px">注意区分块作用域和局部作用域，二者不完全一样。局部作用域是指在函数或一个代码块内部声明的变量或函数的作用域，它们只能在函数内部或者代码块内部的语句使用。块作用域是指在代码块内部声明的变量的作用域，它们只能在代码块内部访问。也就是说，<ins>局部作用域可以包含块作用域，但是块作用域不能包含局部作用域</ins>。<br />如果你还是觉得很抽象，无法理解而二者之间的关系，你可以把作用域理解为一个圆圈，圆圈里面的东西只能在圆圈内部看到和使用，圆圈外面的东西不能看到和使用。如果有两个圆圈，一个大一个小，小的圆圈在大的圆圈里面，那么小的圆圈里面的东西只能在小的圆圈内部看到和使用，大的圆圈里面的东西可以在大的圆圈内部看到和使用，也可以在小的圆圈内部看到和使用，但是不能在大的圆圈外面看到和使用。这就是作用域的概念。<br />局部作用域是指在函数或一个代码块内部声明的变量或函数的作用域，它们只能在函数内部或者代码块内部的语句使用。也就是说，局部作用域是一个大的圆圈，它包含了函数或代码块的所有内容。块作用域是指在代码块内部声明的变量的作用域，它们只能在代码块内部访问。也就是说，块作用域是一个小的圆圈，它在局部作用域的大圆圈里面。所以，局部作用域可以包含块作用域，但是块作用域不能包含局部作用域。<hr /><h4 id="4-类作用域"><a href="#4-类作用域" class="headerlink" title="4.类作用域"></a><p style="font-family:幼圆;font-size:20px"><b>4.类作用域</h4><p><a name="subsection7-4"></a></p><p>类作用域中声明的变量可以被类的所有成员函数访问，也可以使用类名和<code>::</code>运算符来指定。例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> class_var; <span class="comment">// 类作用域</span></span><br><span class="line">    <span class="comment">// 类的成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_var</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 可以直接访问类作用域变量</span></span><br><span class="line">        cout &lt;&lt; class_var &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类作用域变量的定义和初始化</span></span><br><span class="line"><span class="type">int</span> MyClass::class_var = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建类的对象</span></span><br><span class="line">    MyClass obj;</span><br><span class="line">    <span class="comment">// 调用类的成员函数</span></span><br><span class="line">    obj.<span class="built_in">show_var</span>();</span><br><span class="line">    <span class="comment">// 使用类名和::运算符指定类作用域变量</span></span><br><span class="line">    cout &lt;&lt; MyClass::class_var &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-命名空间作用域"><a href="#5-命名空间作用域" class="headerlink" title="5.命名空间作用域"></a><p style="font-family:幼圆;font-size:20px"><b>5.命名空间作用域</h4><p><a name="subsection7-5"></a></p><p>命名空间作用域中声明的变量可以被同一命名空间中的其他变量或者使用了命名空间名或者using指令的其他地方访问。例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> ns1 &#123;</span><br><span class="line">    <span class="comment">// 命名空间作用域变量</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义另一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> ns2 &#123;</span><br><span class="line">    <span class="comment">// 命名空间作用域变量</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用命名空间名和::运算符指定命名空间作用域变量</span></span><br><span class="line">    cout &lt;&lt; ns1::x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ns2::x &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 使用using指令引入命名空间</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> ns1;</span><br><span class="line">    <span class="comment">// 可以直接使用命名空间作用域变量</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-如何处理作用域冲突？"><a href="#6-如何处理作用域冲突？" class="headerlink" title="6.如何处理作用域冲突？"></a><p style="font-family:幼圆;font-size:20px"><b>6.如何处理作用域冲突？</h4><p><a name="subsection7-6"></a></p><p>如果在内部作用域中声明的变量与外部作用域中的变量同名，则内部作用域中的变量将覆盖外部作用域中的变量。例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明，与全局变量同名</span></span><br><span class="line">    <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 内部作用域中的局部变量覆盖了外部作用域中的全局变量</span></span><br><span class="line">    cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要访问被覆盖的外部作用域中的变量，可以使用<code>::</code>运算符来指定。例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量声明</span></span><br><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量声明，与全局变量同名</span></span><br><span class="line">    <span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 使用::运算符指定外部作用域中的全局变量</span></span><br><span class="line">    cout &lt;&lt; ::g &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但同时编译器也会警告:<br><img src="https://s2.loli.net/2023/04/13/Jdp7oe1BiZnIsH9.png" alt="unused variable"><br>这是因为第二个<code>g</code>变量没有用到(unused variable)，warning不会导致程序无法正常编译，不用担心。</p><hr><h2 id="Ⅷ-内联函数"><a href="#Ⅷ-内联函数" class="headerlink" title="Ⅷ.内联函数  "></a><p style="font-family:幼圆;font-size:25px">Ⅷ.内联函数  </p></h2><p><a name="section8"></a></p><p>(摘选自C++ Primer Plus)  </p><p style="font-family:楷体;font-size:17px">"内联函数是C++为提高程序运行速度所做的一项改进。常规函数和内联函数之间的主要区别不在于编写方式，而是在于C++编译器如何将它们组合到程序中。要了解内联函数和常规函数之间的区别，必须深入到程序内部。"<br /><hr /><p><a href="https://learn.microsoft.com/en-us/cpp/cpp/inline-functions-cpp?view=msvc-170">这是微软官网上对于内联函数的介绍</a>  </p><hr /><h4 id="1-什么是内联函数"><a href="#1-什么是内联函数" class="headerlink" title="1.什么是内联函数"></a><p style="font-family:幼圆;font-size:20px"><b>1.什么是内联函数</h4><p><a name="subsection8-1"></a></p><p>经过之前的学习，我们知道了在C++中，函数是一种将一组语句封装起来的代码块，可以在程序中多次调用。函数的优点是可以提高代码的重用型、可读性和可维护性，以及方便修改和维护。<br>但是，函数的缺点是每次调用时都会产生一些额外的开销，比如参数传递、栈帧分配、返回地址跳转等。这些开销在函数体很小或者调用频繁的情况下可能会影响程序的性能。<br>为了解决这个问题，C++提供了一种特殊的函数，叫做内联函数。<ins>内联函数是一种在调用时不会产生函数调用开销的函数，而是直接将函数体的代码插入到调用处</ins>。这样可以避免函数调用的开销，同时保留函数的优点。内联函数通常用于实现一些简单、短小、频繁调用的功能。</p><h4 id="2-如何定义和使用内联函数"><a href="#2-如何定义和使用内联函数" class="headerlink" title="2.如何定义和使用内联函数"></a><p style="font-family:幼圆;font-size:20px"><b>2.如何定义和使用内联函数</h4><p><a name="subsection8-2"></a></p><p>要定义内联函数，有两种方法:</p><ul><li>在函数声明处加上<code>inline</code>关键字，例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;  <span class="comment">//声明一个内联函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//声明一个内联函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在类&#x2F;结构体&#x2F;联合体的定义中完全定义内联成员函数，例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 内联成员函数定义</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">sqrt</span>(x * x + y * y + z * z);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">double</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>Vector</code> 类有一个内联成员函数<code>length()</code>，用于计算向量的长度。由于<code>length()</code> 函数非常简单，只有一个表达式，因此将其定义为内联函数可以提高程序的运行效率，避免了函数调用的开销。</p><hr /><p style="font-family:楷体;font-size:18px">需要注意的是，虽然使用inline关键字可以告诉编译器将函数作为内联函数进行编译，但是编译器是否真正将函数作为内联函数进行编译，还需要根据具体情况进行判断。对于一些较复杂的函数，即使添加了inline关键字，编译器也可能不将其作为内联函数进行编译。<hr /><p>在实际应用中，内联函数常常用于定义一些短小、简单的函数，例如访问器函数 <i>(accessor function)</i> 、计算器函数 <i>(calculator function)</i> 等。这些函数通常只有几行代码，而且在程序中会被频繁调用，因此将它们定义为内联函数可以有效提高程序的性能。</p><h4 id="3-内联函数的注意事项"><a href="#3-内联函数的注意事项" class="headerlink" title="3.内联函数的注意事项"></a><p style="font-family:幼圆;font-size:20px"><b>3.内联函数的注意事项</h4><p><a name="subsection8-3"></a></p><p>虽然内联函数有很多优点，但也有一些需要注意的地方:</p><ul><li>内联函数只是一个建议，不是一个强制。编译器可以根据自己的判断决定是否对一个内联函数进行内联展开。如果一个内联函数太复杂或者太大，或者有递归或者动态绑定等特性，编译器可能会忽略它的内联请求，而将它当作普通函数处理。<br /></li><li>内联函数必须在每个使用它的源文件中都有定义。这意味着通常需要将内联函数的定义放在头文件中，而不是源文件中。否则，在链接时可能会出现未定义引用的错误。<br /></li><li>内联函数可能会增加代码的大小。因为每次调用都会复制一份函数体的代码，如果一个内联函数被多次调用，那么它可能会占用更多的空间。<hr></li></ul><h2 id="Ⅸ-函数模板"><a href="#Ⅸ-函数模板" class="headerlink" title="Ⅸ.函数模板  "></a><p style="font-family:幼圆;font-size:25px">Ⅸ.函数模板  </p></h2><p><a name="section9"></a></p><p>“Templates are the basis for generic programming in C++. As a strongly-typed language, C++ requires all variables to have a specific type, either explicitly declared by the programmer or deduced by the compiler. However, many data structures and algorithms look the same no matter what type they are operating on. Templates enable you to define the operations of a class or function, and let the user specify what concrete types those operations should work on.”  </p><p style="font-family:楷体;font-size:17px">"(函数)模板是C++中泛型编程的基础。作为一种强类型语言，C++要求所有变量都具有特定类型，要么由程序员显式声明，要么由编译器推导。但是，无论它们在哪种类型上运行，许多数据结构和算法看起来都是一样的。模板使您能够定义类或函数的操作，并让用户指定这些操作应处理的具体类型。"<hr />  <h4 id="1-函数模板的概念"><a href="#1-函数模板的概念" class="headerlink" title="1.函数模板的概念"></a><p style="font-family:幼圆;font-size:20px"><b>1.函数模板的概念</h4><p><a name="subsection9-1"></a></p><p>函数模板是一种通用函数，它允许程序员编写一种通用的函数，可以在多种不同类型的数据上进行操作。在C++中，函数模板通过使用泛型编程的方式来实现。简而言之，函数模板就是定义一个通用的函数，然后在使用时根据实际需要指定类型参数。</p><h4 id="2-函数模板的语法"><a href="#2-函数模板的语法" class="headerlink" title="2.函数模板的语法"></a><p style="font-family:幼圆;font-size:20px"><b>2.函数模板的语法</h4><p><a name="subsection9-2"></a></p><p>函数模板的语法与普通函数非常相似，只是在函数名后面添加了一个尖括号 <code>&lt;&gt;</code> ，其中包含了一个或多个类型参数。例如，下面是一个简单的函数模板，用于计算两个数的最大值:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>template &lt;typename T&gt;</code> 表示这是一个函数模板，并指定了一个类型参数 <code>T</code>。在函数体中，我们使用了 <code>T</code> 来表示函数参数和返回值的类型。</p><p>在使用函数模板时，需要在函数名后面指定类型参数的具体类型。例如，要使用上面定义的 <code>max</code> 函数来计算两个整数的最大值，可以这样调用:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> max_value = <span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>&lt;int&gt;</code> 指定了类型参数为 <code>int</code> ，这样编译器就知道了函数参数和返回值的具体类型。</p><h4 id="3-函数模板的用法"><a href="#3-函数模板的用法" class="headerlink" title="3.函数模板的用法"></a><p style="font-family:幼圆;font-size:20px"><b>3.函数模板的用法</h4><p><a name="subsection9-3"></a></p><p>函数模板通常用于编写通用算法或数据结构，可以在不同类型的数据上进行操作。例如，可以使用函数模板来编写一个通用的排序算法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(T arr[], <span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) </span><br><span class="line">            &#123;</span><br><span class="line">                T temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>bubble_sort</code> 函数模板，可以对任意类型的数组进行排序。在函数体中，我们使用了类型参数 <code>T</code> 来表示数组元素的类型。</p><p>使用函数模板时，需要在函数名后面指定类型参数的具体类型。例如，要使用上面定义的 <code>bubble_sort</code> 函数模板来对一个整数数组进行排序，可以这样调用:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="built_in">bubble_sort</span>&lt;<span class="type">int</span>&gt;(arr, n);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>&lt;int&gt;</code> 指定了类型参数为 <code>int</code>，这样编译器就知道了要对整数数组进行排序。</p><p>另外需要注意的是，函数模板可以有多个类型参数，例如:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, U b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>add</code> 函数模板，可以对任意类型的数据进行加法运算。函数模板有两个类型参数 <code>T</code> 和 <code>U</code>，分别表示两个参数的类型。</p><p>使用函数模板时，需要在函数名后面指定类型参数的具体类型。例如，要使用上面定义的 <code>add</code> 函数模板来计算两个整数的和，可以这样调用:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">double</span> b = <span class="number">4.5</span>;</span><br><span class="line"><span class="type">double</span> sum = <span class="built_in">add</span>&lt;<span class="type">int</span>, <span class="type">double</span>&gt;(a, b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>&lt;int, double&gt;</code> 指定了类型参数为 <code>int</code> 和 <code>double</code>，这样编译器就知道了要对整数和浮点数进行加法运算。</p><h4 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a><p style="font-family:幼圆;font-size:20px"><b>4.总结</h4><p><a name="subsection9-4"></a></p><p>函数模板是C++中一种非常有用的特性，它可以让程序员编写通用的函数，可以在多种不同类型的数据上进行操作。在使用函数模板时，需要在函数名后面指定类型参数的具体类型，这样编译器就可以根据实际需要生成相应的函数代码。函数模板可以有多个类型参数，可以用于编写通用算法或数据结构。</p><hr><h2 id="Ⅹ-Lambda表达式"><a href="#Ⅹ-Lambda表达式" class="headerlink" title="Ⅹ.Lambda表达式  "></a><p style="font-family:幼圆;font-size:25px">Ⅹ.Lambda表达式  </p></h2><p><a name="section10"></a></p><hr><p style="font-family:楷体;font-size:16px"><b>因为牵扯到了算法与数据结构方面的知识，因此目前不用太关注这个，仅作了解。<hr /><h4 id="1-Lambda表达式的起源"><a href="#1-Lambda表达式的起源" class="headerlink" title="1.Lambda表达式的起源"></a><p style="font-family:幼圆;font-size:20px"><b>1.Lambda表达式的起源</h4><p><a name="section10-1"></a></p><p>Lambda表达式最早出现在Lisp语言中，它是一种匿名函数的实现方式。在C++中，Lambda表达式的概念是在C++11标准中引入的。Lambda表达式的设计目的是为了方便在C++中使用函数式编程技术，同时也提供了一种方便的方式来创建临时函数对象。</p><h4 id="2-Lambda表达式的概念及语法"><a href="#2-Lambda表达式的概念及语法" class="headerlink" title="2.Lambda表达式的概念及语法"></a><p style="font-family:幼圆;font-size:20px"><b>2.Lambda表达式的概念及语法</h4><p><a name="section10-2"></a></p><p>Lambda表达式是一种可以创建匿名函数对象的方式，它可以包含任意数量的参数和函数体，也可以使用函数中的变量。Lambda表达式可以看作是一种函数模板，其模板参数是Lambda表达式的参数列表，模板函数体则是Lambda表达式的函数体。</p><p>Lambda表达式的语法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[capture-list] (parameters) -&gt; <span class="keyword">return</span>-type &#123; body &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，<code>capture-list</code> 是一个可选的捕获列表，用于指定 <code>Lambda</code> 表达式中要捕获的外部变量；<code>parameters</code> 是 <code>Lambda</code> 表达式的参数列表；<code>return-type</code> 是返回类型，可以省略；<code>body</code> 是函数体。</p><h4 id="3-捕获列表"><a href="#3-捕获列表" class="headerlink" title="3.捕获列表"></a><p style="font-family:幼圆;font-size:20px"><b>3.捕获列表</h4><p><a name="section10-3"></a></p><p>Lambda表达式的捕获列表用于指定要捕获的外部变量。捕获列表由方括号括起来，可以包含以下三种类型的捕获方式：</p><p>1.值捕获 <i>(value capture)</i> ：通过值拷贝的方式捕获外部变量。语法格式为“变量名”或“&#x3D;”，前者表示只捕获指定变量，后者表示捕获所有外部变量。</p><p>2.引用捕获 <i>(reference capture</i> ：通过引用的方式捕获外部变量。语法格式为“&amp;变量名”。</p><p>3.this指针捕获 <i>(this capture)</i> ：通过值拷贝或引用的方式捕获当前对象的指针。语法格式为“this”或“&amp;”。</p><h4 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a><p style="font-family:幼圆;font-size:20px"><b>4.应用</h4><p><a name="section10-4"></a></p><p>下面是一个Lambda表达式的示例，它将一个整数向量中的所有元素相加并返回结果:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [&amp;sum](<span class="type">int</span> i) </span><br><span class="line">  &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;The sum is &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The sum is <span class="number">15</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中，<code>Lambda</code> 表达式是通过 <code>[&amp;sum]</code> 的方式捕获了外部变量 <code>sum</code> ，并在 <code>Lambda</code> 表达式的函数体中将向量中的元素累加到 <code>sum</code> 中。Lambda表达式被传递给了 <code>for_each</code> 算法，该算法会对向量中的每个元素都调用一次 <code>Lambda</code> 表达式，最终累加得到向量的元素之和并输出结果。<br><br /><br>Lambda表达式可以应用于很多场景，包括但不限于以下几个方面：</p><ul><li>函数对象：Lambda表达式可以用作函数对象，它可以被传递给STL算法、线程等函数中作为回调函数使用。例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式作为排序函数的比较器</span></span><br><span class="line">std::<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &lt; b; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式作为查找函数的比较器</span></span><br><span class="line"><span class="keyword">auto</span> it = std::<span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x &gt; <span class="number">0</span>; &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>事件处理：Lambda表达式可以用于事件处理，例如处理按键事件、鼠标事件等。例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式处理按键事件</span></span><br><span class="line">window.<span class="built_in">setKeyCallback</span>([](<span class="type">int</span> key, <span class="type">int</span> action) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">        <span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式处理鼠标事件</span></span><br><span class="line">window.<span class="built_in">setMouseCallback</span>([](<span class="type">int</span> button, <span class="type">int</span> action, <span class="type">int</span> mods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (button == GLFW_MOUSE_BUTTON_LEFT &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Left mouse button pressed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>并行编程：Lambda表达式可以用于并行编程，例如OpenMP、CUDA等框架中可以使用Lambda表达式来定义并行任务。例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式定义并行任务</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="comment">// do some work</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式定义CUDA内核函数</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">add_kernel</span><span class="params">(<span class="type">int</span> n, <span class="type">float</span> *x, <span class="type">float</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; n) y[i] = x[i] + y[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>GUI编程：Lambda表达式可以用于GUI编程中，例如Qt框架中可以使用Lambda表达式来定义信号槽函数。例如:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式定义信号槽函数</span></span><br><span class="line"><span class="built_in">connect</span>(button, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Title&quot;</span>, <span class="string">&quot;Message&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Lambda表达式定义过滤器函数</span></span><br><span class="line">lineEdit-&gt;<span class="built_in">installEventFilter</span>([=](QObject *obj, QEvent *event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">type</span>() == QEvent::KeyPress) &#123;</span><br><span class="line">        QKeyEvent *keyEvent = <span class="built_in">static_cast</span>&lt;QKeyEvent*&gt;(event);</span><br><span class="line">        <span class="keyword">if</span> (keyEvent-&gt;<span class="built_in">key</span>() == Qt::Key_Escape)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br /><hr /><hr /><p style="font-family:楷体;font-size:18px">熟练运用C++的函数可以完成很多有意思的项目，我花了一点时间做了一个简单的图书管理系统，你可以将代码复制粘贴到你的IDE中并运行:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义书籍类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string title;</span><br><span class="line">    string author;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Book</span>(string t, string a, <span class="type">int</span> y) : <span class="built_in">title</span>(t), <span class="built_in">author</span>(a), <span class="built_in">year</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图书管理系统类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Library</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 添加书籍</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        string title, author;</span><br><span class="line">        <span class="type">int</span> year;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入书名：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; title;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入作者名：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; author;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入出版年份：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; year;</span><br><span class="line">        <span class="function">Book <span class="title">newBook</span><span class="params">(title, author, year)</span></span>;</span><br><span class="line">        books.<span class="built_in">push_back</span>(newBook);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;书籍添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除书籍</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        string title;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入要删除的书籍名称：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; title;</span><br><span class="line">        <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; books.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (books[i].title == title) &#123;</span><br><span class="line">                books.<span class="built_in">erase</span>(books.<span class="built_in">begin</span>() + i);</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;书籍删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;未找到该书籍！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找书籍</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">searchBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        string title;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入要查找的书籍名称：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; title;</span><br><span class="line">        <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; books.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (books[i].title == title) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;书籍名称：&quot;</span> &lt;&lt; books[i].title &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;作者：&quot;</span> &lt;&lt; books[i].author &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;出版年份：&quot;</span> &lt;&lt; books[i].year &lt;&lt; endl;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;未找到该书籍！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示菜单</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;==============================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;欢迎使用图书管理系统！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请选择您要进行的操作：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1. 添加书籍&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2. 删除书籍&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3. 查找书籍&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0. 退出系统&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;==============================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行系统</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">showMenu</span>();</span><br><span class="line">            <span class="type">int</span> choice;</span><br><span class="line">            cin &gt;&gt; choice;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">addBook</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="built_in">removeBook</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="built_in">searchBook</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;感谢使用图书管理系统！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;无效的选择！请重新输入。&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Library library;</span><br><span class="line">    library.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="font-family:楷体;font-size:18px">不过由于时间紧迫，我没有调试这个程序，出现奇奇怪怪的bug是难免的。如果程序在终端运行的时候突然崩溃(比如一直快速闪回，我目前还没碰到这个bug但肯定有，主要还是看运气)，你只需要同时按下键盘上的ctrl和c便可退出程序。<p style="font-family:楷体;font-size:18px">当然，在金融领域C++也有着较为广泛的应用，特别是在高频交易、风险管理和数据分析方面。以下是一些具体的应用实例:<br />1.高频交易：C++在高频交易中得到广泛应用，因为它能够提供高效的性能和对硬件的底层控制。通过使用C++开发高频交易算法，交易员可以快速响应市场变化并执行交易。<br />2.风险管理：金融机构使用C++开发风险管理系统，以评估其投资组合的风险和回报。这些系统使用复杂的算法和模型来计算风险和回报，并提供决策支持和实时监控。<br />3.数据分析：C++在金融数据分析中也得到广泛应用。通过使用C++编写数据分析程序，金融分析师可以对市场数据进行统计分析、预测和建模。C++还可以与其他编程语言和数据分析工具集成，例如Python和R。<br />4.交易平台：C++在金融交易平台中也得到广泛应用。通过使用C++编写交易平台，交易员可以快速执行交易、管理订单和查看市场数据。<br /><br /></p><p><div style="text-align: center;">    <h1><strong>END</h1></div><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-at-fill" viewBox="0 0 16 16">  <path d="M2 2A2 2 0 0 0 .05 3.555L8 8.414l7.95-4.859A2 2 0 0 0 14 2H2Zm-2 9.8V4.698l5.803 3.546L0 11.801Zm6.761-2.97-6.57 4.026A2 2 0 0 0 2 14h6.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.606-3.446l-.367-.225L8 9.586l-1.239-.757ZM16 9.671V4.697l-5.803 3.546.338.208A4.482 4.482 0 0 1 12.5 8c1.414 0 2.675.652 3.5 1.671Z"/>  <path d="M15.834 12.244c0 1.168-.577 2.025-1.587 2.025-.503 0-1.002-.228-1.12-.648h-.043c-.118.416-.543.643-1.015.643-.77 0-1.259-.542-1.259-1.434v-.529c0-.844.481-1.4 1.26-1.4.585 0 .87.333.953.63h.03v-.568h.905v2.19c0 .272.18.42.411.42.315 0 .639-.415.639-1.39v-.118c0-1.277-.95-2.326-2.484-2.326h-.04c-1.582 0-2.64 1.067-2.64 2.724v.157c0 1.867 1.237 2.654 2.57 2.654h.045c.507 0 .935-.07 1.18-.18v.731c-.219.1-.643.175-1.237.175h-.044C10.438 16 9 14.82 9 12.646v-.214C9 10.36 10.421 9 12.485 9h.035c2.12 0 3.314 1.43 3.314 3.034v.21Zm-4.04.21v.227c0 .586.227.8.581.8.31 0 .564-.17.564-.743v-.367c0-.516-.275-.708-.572-.708-.346 0-.573.245-.573.791Z"/></svg> <p><a href="mailto:mk20040924@outlook.com">If you have any questions,send me an email.</a></p></p>]]></content>
      
      
      <categories>
          
          <category> C/C++基础理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础入门 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种C语言中常见的编译器报错类型</title>
      <link href="/2023/04/09/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IDE%E6%8A%A5%E9%94%99%E6%8F%90%E7%A4%BA/"/>
      <url>/2023/04/09/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84IDE%E6%8A%A5%E9%94%99%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<font face = "微软雅黑"><h2 id="下面是一些常见的IDE报错提示以及对应的解释"><a href="#下面是一些常见的IDE报错提示以及对应的解释" class="headerlink" title="下面是一些常见的IDE报错提示以及对应的解释:"></a>下面是一些常见的IDE报错提示以及对应的解释:</h2><h4 id="1-语法错误-在程序中使用无效的语法或者语法错误的代码行可能导致编译器报错。"><a href="#1-语法错误-在程序中使用无效的语法或者语法错误的代码行可能导致编译器报错。" class="headerlink" title="1.语法错误:在程序中使用无效的语法或者语法错误的代码行可能导致编译器报错。"></a><strong>1.语法错误:在程序中使用无效的语法或者语法错误的代码行可能导致编译器报错。</strong></h4><p><strong>例如,以下代码中漏掉了分号:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure><hr><p><img src="https://s2.loli.net/2023/04/09/nP8OyhQaCtpsJXi.png" alt="语法错误IDE报错提示"></p><hr><p><strong>正确的写法是这样的:</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a =<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="2-缺少头文件-在程序中使用某些库函数时，需要包含相应的头文件。如果忘记包含头文件或者头文件路径设置不正确，编译器会报错。"><a href="#2-缺少头文件-在程序中使用某些库函数时，需要包含相应的头文件。如果忘记包含头文件或者头文件路径设置不正确，编译器会报错。" class="headerlink" title="2.缺少头文件:在程序中使用某些库函数时，需要包含相应的头文件。如果忘记包含头文件或者头文件路径设置不正确，编译器会报错。"></a><strong>2.缺少头文件:在程序中使用某些库函数时，需要包含相应的头文件。如果忘记包含头文件或者头文件路径设置不正确，编译器会报错。</strong></h4><p><strong>例如，以下代码使用了<em>strcpy</em>函数但没有包含头文件<em>string.h</em>:</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dest[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;源字符串：%s\n&quot;</span>, src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;目标字符串：%s\n&quot;</span>, dest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="https://s2.loli.net/2023/04/09/R3bmHZ2fawSD7xE.png" alt="缺少头文件IDE报错提示"> </p><hr><p><strong>编译器会报错，提示找不到strcpy()函数。其他情况如你使用printf()函数但是没有包含头文件stdio.h，程序也会报类似的错。</strong></p><p><strong>正确的代码是这样的:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> dest[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;源字符串：%s\n&quot;</span>, src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;目标字符串：%s\n&quot;</span>, dest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="https://www.runoob.com/cprogramming/c-function-strcpy.html">注:strcpy函数(click me)</a></p><hr><h4 id="3-重复定义-如果在程序中多次定义相同的变量或函数，编译器会报错。"><a href="#3-重复定义-如果在程序中多次定义相同的变量或函数，编译器会报错。" class="headerlink" title="3.重复定义:如果在程序中多次定义相同的变量或函数，编译器会报错。"></a><strong>3.重复定义:如果在程序中多次定义相同的变量或函数，编译器会报错。</strong></h4><p><strong>例如，以下代码中重复定义了变量a：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="https://s2.loli.net/2023/04/09/9DlBCPEyfUgvi17.png" alt="重复定义IDE报错提示">  </p><hr><font face="楷体"><p><strong>(注:在编译器报告的错误信息中，note 表示一条注释性信息，通常是为了帮助程序员理解错误的原因和上下文。在这个例子中，note 表示之前的定义在哪里，即第二行代码中的 int a &#x3D; 10;，这样程序员就可以找到在哪里第一次定义了变量 a。)</strong></p><font face = "微软雅黑"><p><strong>通常情况下，一个变量只能在同一个作用域中定义一次。因为如果在同一个作用域中定义了两个或更多同名变量，编译器无法确定在使用该变量时应该使用那个变量的值。因此正确的写法是这样的:</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-类型不匹配-在程序中使用不兼容的类型进行赋值或函数调用时，编译器会报错。"><a href="#4-类型不匹配-在程序中使用不兼容的类型进行赋值或函数调用时，编译器会报错。" class="headerlink" title="4.类型不匹配:在程序中使用不兼容的类型进行赋值或函数调用时，编译器会报错。"></a><strong>4.类型不匹配:在程序中使用不兼容的类型进行赋值或函数调用时，编译器会报错。</strong></h4><p><strong>例如，以下代码中尝试将字符串赋值给整型变量:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="string">&quot;HELLO WORLD!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编译器会报错，提示类型不匹配:</strong> </p><hr><p><img src="https://s2.loli.net/2023/04/10/pJFQjA8M1e9ZV4q.png" alt="类型不匹配导致IDE报错"></p><hr><p><strong>正确的写法是这样的:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;HELLO WORLD!&quot;</span>; <span class="comment">//定义一个数组储存这段字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, arr); <span class="comment">//要用%s格式化字符串的输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-如果使用了未声明的变量或函数，编译器会报错。"><a href="#5-如果使用了未声明的变量或函数，编译器会报错。" class="headerlink" title="5.如果使用了未声明的变量或函数，编译器会报错。"></a><strong>5.如果使用了未声明的变量或函数，编译器会报错。</strong></h4><p><strong>例如，以下代码中使用了未声明的变量b:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c = a + b; <span class="comment">//变量b未定义</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编译器会报错，提示未定义的标识符:</strong></p><hr><p><img src="https://s2.loli.net/2023/04/09/38yqakW4O7SFIER.png" alt="未定义标识符IDE报错提示">  </p><hr><p><strong>正确写法:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a + b; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++基础理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础入门 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与字符串(上)</title>
      <link href="/2023/02/02/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/02/02/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<font face="微软雅黑"><h2 id="变量与字符串"><a href="#变量与字符串" class="headerlink" title="变量与字符串"></a>变量与字符串</h2><h4 id="一-变量"><a href="#一-变量" class="headerlink" title="一 变量"></a>一 变量</h4><p><strong>1.变量(<em>variable</em>):一种标签</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span>    <span class="comment">#这样就创建了一个变量x,x的值为1</span></span><br></pre></td></tr></table></figure><p>‘&#x3D;’叫做赋值操作符,它将其右边的值赋给左边</p><p>现在我们想打印出来这个变量x,那么就需要用到print函数:</p><h5 id="Eg1"><a href="#Eg1" class="headerlink" title="Eg1"></a>Eg1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:1</span></span><br></pre></td></tr></table></figure><p>print函数可以用来打印其后的括号内的字符以及字符串,它的具体用法会在之后的章节中提到,这里就不再赘述.<br><strong>重点:变量名是由字母、数字和下划线构成,但不能以数字打头:</strong></p><p>1_28(<strong>Wrong</strong>), py_1(<strong>Right</strong>), py-1(<strong>Wrong</strong>), py&amp;1(<em>Wrong</em>)</p><p>注：python3以上的版本变量名支持中文,但是非常非常不推荐用中文作为变量名</p><hr><p>2.变量,顾名思义就是可变的量,如:<br>Eg2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">x=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:2</span></span><br></pre></td></tr></table></figure><p>可以看到,最终打印出来的值是2,而不是1,这说明<strong>变量的值取决于最后一次赋值操作赋给它的量</strong></p><hr><p>3.除此之外,不同变量之间的值可以互相传递:<br>Eg3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">2</span></span><br><span class="line">x=y</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:2</span></span><br></pre></td></tr></table></figure><p>最终打印出x的值是2,可以根据程序进行的过程,思考变量间的值进行交换的大致原理.  </p><hr><p>4.若有多个不同的变量,想赋给它们相同的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">1</span></span><br><span class="line">z=<span class="number">1</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这么写是十分繁琐的,为了使程序更加简短、易读,我们还可以这么写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=y=z=a=b=c=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z,a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:1 1 1 1 1 1</span></span><br></pre></td></tr></table></figure><hr><p>5.现有两个变量x和y,想对二者的值进行互换;<br>传统的写法是这样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">2</span></span><br><span class="line">z=x</span><br><span class="line">x=y</span><br><span class="line">y=z</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:2 1</span></span><br></pre></td></tr></table></figure><p>这样写的好处是更容易理解,z相当于一个空瓶子,把x里的东西先倒进去,x就成了空的,再把y里的东西倒进去…<br>python作为最易上手的编程语言之一,自然还有更为简单的写法来完成这一工作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="number">2</span></span><br><span class="line">x,y=y,x</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:2 1</span></span><br></pre></td></tr></table></figure><hr><hr><h4 id="二-字符串"><a href="#二-字符串" class="headerlink" title="二 字符串"></a>二 字符串</h4><p><strong>1.字符串(<em>string</em>):使用字符串来表示文本序列.</strong><br>共有两种形式：<br>①单引号:用一对单引号将文本包含起来<br>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:hello world</span></span><br></pre></td></tr></table></figure><p>②双引号:用一对双引号将文本包含起来<br>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:hello world</span></span><br></pre></td></tr></table></figure><p>可以发现,不管单引号还是双引号,都可以包含一段字符串来让print函数完美地打印出这段字符串,看似这种设计十分鸡肋,其实不然; </p><hr><p>比如这个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;It&#x27;</span>s up to you to decide.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#输出结果:报错 SyntaxError: unterminated string literal (detected at line 1)</span></span><br></pre></td></tr></table></figure><p>这是因为<strong>需要打印的文本两头的单&#x2F;双引号都必须成双成对的存在</strong>,如上面的程序,It前的单引号与It后的单引号凑成了一对,使得后续的文本(s up to…)只有在结尾处有一个单引号,因此无法打印.<br>这种情况下我们应当使用双引号将这段字符串括起来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;It&#x27;s up to you to decide.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:It&#x27;s up to you to decide.</span></span><br></pre></td></tr></table></figure><hr><p>如果我们想打印这么一段话：”It’s up to you to decide.”<br>既包括双引号,又包括单引号,用上述的所有方法都无法打印出这段话;<br>这里是一个错误的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;It&#x27;</span>s up to you to decide.<span class="string">&quot;&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#输出结果:错误 SyntaxError: unterminated string literal (detected at line 1)</span></span><br></pre></td></tr></table></figure><p>问题出现在第二个单引号,如果没有这个单引号,程序应该是这样的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;It s up to you to decide.&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:&quot;It s up to you to decide.&quot;</span></span><br></pre></td></tr></table></figure><p>但是为了遵循英语语法,这个单引号不可删除.那么,我们就需要用到转义字符：\  </p><p><strong>2.转义字符：转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分</strong></p><p><strong>下面是一些常用的转义字符:</strong>  </p><table><thead><tr><th align="left">转义字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行符,将光标位置移到下一行开头</td></tr><tr><td align="left">\t</td><td align="left">水平制表符,即tab键,一般相当于四个空格</td></tr><tr><td align="left">\b</td><td align="left">退格(backspace),将光标位置移到前一列</td></tr><tr><td align="left">\\</td><td align="left">反斜线</td></tr><tr><td align="left">\‘</td><td align="left">单引号</td></tr><tr><td align="left">\“</td><td align="left">双引号</td></tr></tbody></table><p>那么我们只需在引起歧义的单引号前加一个反斜杠,就能表示这个单引号只是个单引号,没有其他特殊的含义,程序就不会报错了;  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;It\&#x27;s up to you to decide.&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:&quot;It&#x27;s up to you to decide.&quot;</span></span><br></pre></td></tr></table></figure><hr><p><strong>3.我们来看一看其他出现频率很高的转义字符的用法：</strong><br>①\n 换行符  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one is 1\ntwo is 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:</span></span><br><span class="line">one <span class="keyword">is</span> <span class="number">1</span></span><br><span class="line">two <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">```  </span><br><span class="line">②\t 水平制表符</span><br><span class="line">```python</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\thello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果:    </span></span><br><span class="line">    hello world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python基础理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基础入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
